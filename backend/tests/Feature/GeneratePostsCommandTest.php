<?php

namespace Tests\Feature;

use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;
use App\Models\IAnfluencer;
use App\Models\Post;
use App\Services\OpenAIService;
use App\Services\ImageStorageService;
use Mockery;
use Carbon\Carbon;

class GeneratePostsCommandTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp();

        // Freeze time for consistent testing
        Carbon::setTestNow(Carbon::parse('2025-10-17 12:00:00'));
    }

    protected function tearDown(): void
    {
        Carbon::setTestNow(); // Reset time
        parent::tearDown();
    }

    public function test_generates_posts_for_active_ianfluencers()
    {
        // Arrange: Create active IAnfluencers
        $influencer = IAnfluencer::factory()->create([
            'username' => 'test_user',
            'is_active' => true,
            'niche' => 'lifestyle',
        ]);

        // Mock OpenAIService
        $mockOpenAI = Mockery::mock(OpenAIService::class);
        $mockOpenAI->shouldReceive('generatePost')
            ->andReturn([
                'content' => 'Test post content generated by AI',
                'image_description' => 'A beautiful sunset',
                'hashtags' => ['test', 'ai'],
                'mood' => 'positive'
            ]);

        $this->app->instance(OpenAIService::class, $mockOpenAI);

        // Mock ImageStorageService
        $mockImageStorage = Mockery::mock(ImageStorageService::class);
        $mockImageStorage->shouldReceive('ensurePostsDirectoryExists')->andReturn(true);
        $this->app->instance(ImageStorageService::class, $mockImageStorage);

        // Act: Execute command with skip-images to avoid image generation
        $this->artisan('iagram:generate-posts', ['--skip-images' => true, '--count' => 2])
            ->assertExitCode(0);

        // Assert: Verify posts were created
        $this->assertDatabaseHas('posts', [
            'i_anfluencer_id' => $influencer->id,
            'content' => 'Test post content generated by AI',
            'is_ai_generated' => true,
        ]);

        // Verify at least one post was created
        $this->assertGreaterThanOrEqual(1, Post::where('i_anfluencer_id', $influencer->id)->count());
    }

    public function test_published_at_is_within_retroactive_range()
    {
        // Arrange
        $influencer = IAnfluencer::factory()->create(['is_active' => true]);

        $mockOpenAI = Mockery::mock(OpenAIService::class);
        $mockOpenAI->shouldReceive('generatePost')
            ->andReturn([
                'content' => 'Test content for timestamp validation',
                'image_description' => 'Test image',
            ]);

        $this->app->instance(OpenAIService::class, $mockOpenAI);

        $mockImageStorage = Mockery::mock(ImageStorageService::class);
        $mockImageStorage->shouldReceive('ensurePostsDirectoryExists')->andReturn(true);
        $this->app->instance(ImageStorageService::class, $mockImageStorage);

        // Act
        $this->artisan('iagram:generate-posts', ['--skip-images' => true, '--count' => 1])
            ->assertExitCode(0);

        // Assert: published_at should be between 1-72 hours ago
        $post = Post::where('i_anfluencer_id', $influencer->id)->first();

        $this->assertNotNull($post);
        $this->assertNotNull($post->published_at);

        $now = Carbon::now();
        $minTime = $now->copy()->subHours(72);
        $maxTime = $now->copy()->subHours(1);

        $this->assertTrue(
            $post->published_at >= $minTime && $post->published_at <= $maxTime,
            "Published at {$post->published_at} should be between {$minTime} and {$maxTime}"
        );
    }

    public function test_does_not_generate_posts_if_no_active_ianfluencers()
    {
        // Arrange: Create only inactive IAnfluencers
        IAnfluencer::factory()->create(['is_active' => false]);

        $mockOpenAI = Mockery::mock(OpenAIService::class);
        $mockOpenAI->shouldNotReceive('generatePost');
        $this->app->instance(OpenAIService::class, $mockOpenAI);

        $mockImageStorage = Mockery::mock(ImageStorageService::class);
        $mockImageStorage->shouldReceive('ensurePostsDirectoryExists')->andReturn(true);
        $this->app->instance(ImageStorageService::class, $mockImageStorage);

        // Act
        $this->artisan('iagram:generate-posts', ['--skip-images' => true])
            ->expectsOutput('No active IAnfluencers found. Please run the seeders first.')
            ->assertExitCode(1);

        // Assert: No posts should be created
        $this->assertEquals(0, Post::count());
    }

    public function test_respects_count_option()
    {
        // Arrange
        $influencer = IAnfluencer::factory()->create(['is_active' => true]);

        $mockOpenAI = Mockery::mock(OpenAIService::class);
        $mockOpenAI->shouldReceive('generatePost')
            ->times(3) // Should be called at most 3 times (--count=3)
            ->andReturn([
                'content' => 'Test post content',
                'image_description' => 'Test image',
            ]);

        $this->app->instance(OpenAIService::class, $mockOpenAI);

        $mockImageStorage = Mockery::mock(ImageStorageService::class);
        $mockImageStorage->shouldReceive('ensurePostsDirectoryExists')->andReturn(true);
        $this->app->instance(ImageStorageService::class, $mockImageStorage);

        // Act
        $this->artisan('iagram:generate-posts', ['--skip-images' => true, '--count' => 3])
            ->assertExitCode(0);

        // Assert: Should create between 1 and 3 posts (random)
        $postCount = Post::where('i_anfluencer_id', $influencer->id)->count();
        $this->assertGreaterThanOrEqual(1, $postCount);
        $this->assertLessThanOrEqual(3, $postCount);
    }

    public function test_skips_empty_content()
    {
        // Arrange
        $influencer = IAnfluencer::factory()->create(['is_active' => true]);

        $mockOpenAI = Mockery::mock(OpenAIService::class);
        $mockOpenAI->shouldReceive('generatePost')
            ->once()
            ->andReturn([
                'content' => '', // Empty content
                'image_description' => 'Test image',
            ]);

        $this->app->instance(OpenAIService::class, $mockOpenAI);

        $mockImageStorage = Mockery::mock(ImageStorageService::class);
        $mockImageStorage->shouldReceive('ensurePostsDirectoryExists')->andReturn(true);
        $this->app->instance(ImageStorageService::class, $mockImageStorage);

        // Act
        $this->artisan('iagram:generate-posts', ['--skip-images' => true, '--count' => 1])
            ->assertExitCode(0);

        // Assert: No post should be created due to empty content
        $this->assertEquals(0, Post::where('i_anfluencer_id', $influencer->id)->count());
    }

    public function test_stores_ai_generation_params()
    {
        // Arrange
        $influencer = IAnfluencer::factory()->create(['is_active' => true]);

        $mockOpenAI = Mockery::mock(OpenAIService::class);
        $mockOpenAI->shouldReceive('generatePost')
            ->andReturn([
                'content' => 'Test content with params',
                'image_description' => 'Beautiful landscape',
                'hashtags' => ['nature', 'adventure'],
                'mood' => 'excited',
            ]);

        $this->app->instance(OpenAIService::class, $mockOpenAI);

        $mockImageStorage = Mockery::mock(ImageStorageService::class);
        $mockImageStorage->shouldReceive('ensurePostsDirectoryExists')->andReturn(true);
        $this->app->instance(ImageStorageService::class, $mockImageStorage);

        // Act
        $this->artisan('iagram:generate-posts', ['--skip-images' => true, '--count' => 1])
            ->assertExitCode(0);

        // Assert
        $post = Post::where('i_anfluencer_id', $influencer->id)->first();

        $this->assertNotNull($post);
        $this->assertNotNull($post->ai_generation_params);
        $this->assertArrayHasKey('model', $post->ai_generation_params);
        $this->assertArrayHasKey('temperature', $post->ai_generation_params);
        $this->assertArrayHasKey('generated_at', $post->ai_generation_params);
        $this->assertArrayHasKey('image_description', $post->ai_generation_params);
        $this->assertArrayHasKey('hashtags', $post->ai_generation_params);
        $this->assertArrayHasKey('mood', $post->ai_generation_params);

        $this->assertEquals('Beautiful landscape', $post->ai_generation_params['image_description']);
        $this->assertEquals(['nature', 'adventure'], $post->ai_generation_params['hashtags']);
        $this->assertEquals('excited', $post->ai_generation_params['mood']);
    }

    public function test_skips_similar_content()
    {
        // Arrange
        $influencer = IAnfluencer::factory()->create(['is_active' => true]);

        // Create an existing post with specific content
        Post::factory()->create([
            'i_anfluencer_id' => $influencer->id,
            'content' => 'I love morning coffee and sunrise views from my balcony',
        ]);

        $mockOpenAI = Mockery::mock(OpenAIService::class);
        $mockOpenAI->shouldReceive('generatePost')
            ->once()
            ->andReturn([
                'content' => 'I love morning coffee and beautiful sunrise views', // Very similar content
                'image_description' => 'Coffee cup',
            ]);

        $this->app->instance(OpenAIService::class, $mockOpenAI);

        $mockImageStorage = Mockery::mock(ImageStorageService::class);
        $mockImageStorage->shouldReceive('ensurePostsDirectoryExists')->andReturn(true);
        $this->app->instance(ImageStorageService::class, $mockImageStorage);

        // Act
        $this->artisan('iagram:generate-posts', ['--skip-images' => true, '--count' => 1])
            ->assertExitCode(0);

        // Assert: Should still have only 1 post (similar content was skipped)
        $this->assertEquals(1, Post::where('i_anfluencer_id', $influencer->id)->count());
    }

    public function test_multiple_influencers_all_get_posts()
    {
        // Arrange: Create multiple active IAnfluencers
        $influencer1 = IAnfluencer::factory()->create(['is_active' => true, 'username' => 'user1']);
        $influencer2 = IAnfluencer::factory()->create(['is_active' => true, 'username' => 'user2']);
        $influencer3 = IAnfluencer::factory()->create(['is_active' => true, 'username' => 'user3']);

        $mockOpenAI = Mockery::mock(OpenAIService::class);
        $mockOpenAI->shouldReceive('generatePost')
            ->andReturn([
                'content' => 'Test post content',
                'image_description' => 'Test image',
            ]);

        $this->app->instance(OpenAIService::class, $mockOpenAI);

        $mockImageStorage = Mockery::mock(ImageStorageService::class);
        $mockImageStorage->shouldReceive('ensurePostsDirectoryExists')->andReturn(true);
        $this->app->instance(ImageStorageService::class, $mockImageStorage);

        // Act
        $this->artisan('iagram:generate-posts', ['--skip-images' => true, '--count' => 1])
            ->assertExitCode(0);

        // Assert: All three influencers should have at least one post
        $this->assertGreaterThanOrEqual(1, Post::where('i_anfluencer_id', $influencer1->id)->count());
        $this->assertGreaterThanOrEqual(1, Post::where('i_anfluencer_id', $influencer2->id)->count());
        $this->assertGreaterThanOrEqual(1, Post::where('i_anfluencer_id', $influencer3->id)->count());
    }
}
